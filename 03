import java.util.*;

public class bf {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of vertices: ");
        int N = sc.nextInt();
        System.out.print("Enter number of edges: ");
        int E = sc.nextInt();

        List<int[]> edges = new ArrayList<>();
        System.out.println("Enter edges (u v weight):");
        for (int i = 0; i < E; i++)
            edges.add(new int[]{sc.nextInt() - 1, sc.nextInt() - 1, sc.nextInt()});

        System.out.print("Enter source vertex: ");
        int src = sc.nextInt() - 1;

        bellmanFord(N, edges, src);
    }

    public static void bellmanFord(int N, List<int[]> edges, int src) {
        int[] dist = new int[N];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        for (int i = 0; i < N - 1; i++)
            for (int[] edge : edges)
                if (dist[edge[0]] != Integer.MAX_VALUE && dist[edge[0]] + edge[2] < dist[edge[1]])
                    dist[edge[1]] = dist[edge[0]] + edge[2];

        for (int[] edge : edges)
            if (dist[edge[0]] != Integer.MAX_VALUE && dist[edge[0]] + edge[2] < dist[edge[1]]) {
                System.out.println("Negative weight cycle detected.");
                return;
            }

        for (int i = 0; i < N; i++)
            System.out.println("Vertex " + (i + 1) + " Distance: " + dist[i]);
    }
}
